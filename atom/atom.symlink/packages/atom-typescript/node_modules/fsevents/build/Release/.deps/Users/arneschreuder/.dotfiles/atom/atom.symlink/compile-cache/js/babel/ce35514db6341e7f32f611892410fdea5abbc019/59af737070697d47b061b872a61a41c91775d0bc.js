Object.defineProperty(exports, '__esModule', {
	value: true
});
/** @babel */

var notificationTemplate = function notificationTemplate(props) {
	return '\n' + props.messages.reduce(function (prev, curr) {
		return '' + prev + curr.replace(/\r|\n/gm, '').replace('@', '  \n') + '\n\n';
	}, '') + '\n\n### Active Configuration\n|Editorconfig-Property|Applied Setting|\n|--------|------:|\n|`end_of_line`|`' + props.end_of_line + '`|\n|`charset`|`' + props.charset + '`|\n|`indent_style`|`' + props.indent_style + '`|\n|`indent_size`/ `tab_width`|`' + props.tab_width + '`|\n|`insert_final_newline`|`' + props.insert_final_newline + '`|\n|`trim_trailing_whitespace`|`' + props.trim_trailing_whitespace + '`|\n|`max_line_length`|`' + props.max_line_length + '`|\n\n_(auto: atom-editorconfig is not influencing that behavior. A full description of the properties can be found on editorconfig.org.)_\n\n' + (props.filename !== undefined && props.filename || '') + '\n';
};

var init = function init() {
	var textEditor = atom.workspace.getActiveTextEditor();
	if (textEditor && textEditor.getBuffer() && textEditor.getBuffer().editorconfig) {
		var buffer = textEditor.getBuffer();
		var ecfg = buffer.editorconfig;
		var settings = ecfg.settings;
		var lineEndings = { '\n': '\\n', '\r': '\\r', '\r\n': '\\r\\n' };

		var properties = {
			filename: buffer.getUri(),
			messages: ecfg.messages,
			// eslint-disable-next-line camelcase
			end_of_line: lineEndings[settings.end_of_line] || settings.end_of_line,
			charset: settings.charset,
			// eslint-disable-next-line camelcase
			indent_style: settings.indent_style,
			// eslint-disable-next-line camelcase
			tab_width: settings.tab_width,
			// eslint-disable-next-line camelcase
			insert_final_newline: settings.insert_final_newline,
			// eslint-disable-next-line camelcase
			trim_trailing_whitespace: settings.trim_trailing_whitespace,
			// eslint-disable-next-line camelcase
			max_line_length: settings.max_line_length
		};

		var notificationOptions = {
			description: notificationTemplate(properties),
			dismissable: true
		};

		switch (ecfg.state) {
			case 'success':
				atom.notifications.addSuccess(textEditor.getTitle(), notificationOptions);
				break;
			case 'warning':
				atom.notifications.addWarning(textEditor.getTitle(), notificationOptions);
				break;
			case 'error':
				atom.notifications.addError(textEditor.getTitle(), notificationOptions);
				break;
			default:
				atom.notifications.addInfo(textEditor.getTitle(), notificationOptions);
		}
	}
};

var subscriber = function subscriber() {
	atom.commands.add('atom-workspace', 'EditorConfig:show-state', init);
};

exports['default'] = subscriber;
exports.init = init;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9hcm5lc2NocmV1ZGVyLy5kb3RmaWxlcy9hdG9tL2F0b20uc3ltbGluay9wYWNrYWdlcy9hdG9tLXR5cGVzY3JpcHQvbm9kZV9tb2R1bGVzL2ZzZXZlbnRzL2J1aWxkL1JlbGVhc2UvLmRlcHMvVXNlcnMvYXJuZXNjaHJldWRlci8uZG90ZmlsZXMvYXRvbS9hdG9tLnN5bWxpbmsvcGFja2FnZXMvZWRpdG9yY29uZmlnL2NvbW1hbmRzL3Nob3cuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFFQSxJQUFNLG9CQUFvQixHQUFHLFNBQXZCLG9CQUFvQixDQUFHLEtBQUssRUFBSTtBQUNyQyxlQUNDLEtBQUssQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLFVBQUMsSUFBSSxFQUFFLElBQUksRUFBSztBQUN2QyxjQUFVLElBQUksR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsRUFBRSxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLE1BQU0sQ0FBQyxVQUFPO0VBQ3hFLEVBQUUsRUFBRSxDQUFDLG1IQUtlLEtBQUssQ0FBQyxXQUFXLHdCQUNyQixLQUFLLENBQUMsT0FBTyw2QkFDUixLQUFLLENBQUMsWUFBWSx5Q0FDSixLQUFLLENBQUMsU0FBUyxxQ0FDckIsS0FBSyxDQUFDLG9CQUFvQix5Q0FDdEIsS0FBSyxDQUFDLHdCQUF3QixnQ0FDdkMsS0FBSyxDQUFDLGVBQWUsdUpBSTVDLEFBQUMsS0FBSyxDQUFDLFFBQVEsS0FBSyxTQUFTLElBQUksS0FBSyxDQUFDLFFBQVEsSUFBSyxFQUFFLENBQUEsUUFDdEQ7Q0FDRCxDQUFDOztBQUVGLElBQU0sSUFBSSxHQUFHLFNBQVAsSUFBSSxHQUFTO0FBQ2xCLEtBQU0sVUFBVSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsbUJBQW1CLEVBQUUsQ0FBQztBQUN4RCxLQUFJLFVBQVUsSUFDYixVQUFVLENBQUMsU0FBUyxFQUFFLElBQ3RCLFVBQVUsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxZQUFZLEVBQUU7QUFDckMsTUFBTSxNQUFNLEdBQUcsVUFBVSxDQUFDLFNBQVMsRUFBRSxDQUFDO0FBQ3RDLE1BQU0sSUFBSSxHQUFHLE1BQU0sQ0FBQyxZQUFZLENBQUM7QUFDakMsTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQztBQUMvQixNQUFNLFdBQVcsR0FBRyxFQUFDLElBQUksRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsUUFBUSxFQUFDLENBQUM7O0FBRWpFLE1BQU0sVUFBVSxHQUFHO0FBQ2xCLFdBQVEsRUFBRSxNQUFNLENBQUMsTUFBTSxFQUFFO0FBQ3pCLFdBQVEsRUFBRSxJQUFJLENBQUMsUUFBUTs7QUFFdkIsY0FBVyxFQUFFLFdBQVcsQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLElBQUksUUFBUSxDQUFDLFdBQVc7QUFDdEUsVUFBTyxFQUFFLFFBQVEsQ0FBQyxPQUFPOztBQUV6QixlQUFZLEVBQUUsUUFBUSxDQUFDLFlBQVk7O0FBRW5DLFlBQVMsRUFBRSxRQUFRLENBQUMsU0FBUzs7QUFFN0IsdUJBQW9CLEVBQUUsUUFBUSxDQUFDLG9CQUFvQjs7QUFFbkQsMkJBQXdCLEVBQUUsUUFBUSxDQUFDLHdCQUF3Qjs7QUFFM0Qsa0JBQWUsRUFBRSxRQUFRLENBQUMsZUFBZTtHQUN6QyxDQUFDOztBQUVGLE1BQU0sbUJBQW1CLEdBQUc7QUFDM0IsY0FBVyxFQUFFLG9CQUFvQixDQUFDLFVBQVUsQ0FBQztBQUM3QyxjQUFXLEVBQUUsSUFBSTtHQUNqQixDQUFDOztBQUVGLFVBQVEsSUFBSSxDQUFDLEtBQUs7QUFDakIsUUFBSyxTQUFTO0FBQ2IsUUFBSSxDQUFDLGFBQWEsQ0FBQyxVQUFVLENBQUMsVUFBVSxDQUFDLFFBQVEsRUFBRSxFQUFFLG1CQUFtQixDQUFDLENBQUM7QUFDMUUsVUFBTTtBQUFBLEFBQ1AsUUFBSyxTQUFTO0FBQ2IsUUFBSSxDQUFDLGFBQWEsQ0FBQyxVQUFVLENBQUMsVUFBVSxDQUFDLFFBQVEsRUFBRSxFQUFFLG1CQUFtQixDQUFDLENBQUM7QUFDMUUsVUFBTTtBQUFBLEFBQ1AsUUFBSyxPQUFPO0FBQ1gsUUFBSSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDLFFBQVEsRUFBRSxFQUFFLG1CQUFtQixDQUFDLENBQUM7QUFDeEUsVUFBTTtBQUFBLEFBQ1A7QUFDQyxRQUFJLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsUUFBUSxFQUFFLEVBQUUsbUJBQW1CLENBQUMsQ0FBQztBQUFBLEdBQ3hFO0VBQ0Q7Q0FDRCxDQUFDOztBQUVGLElBQU0sVUFBVSxHQUFHLFNBQWIsVUFBVSxHQUFTO0FBQ3hCLEtBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLGdCQUFnQixFQUFFLHlCQUF5QixFQUFFLElBQUksQ0FBQyxDQUFDO0NBQ3JFLENBQUM7O3FCQUVNLFVBQVU7UUFBYSxJQUFJLEdBQUosSUFBSSIsImZpbGUiOiIvVXNlcnMvYXJuZXNjaHJldWRlci8uZG90ZmlsZXMvYXRvbS9hdG9tLnN5bWxpbmsvcGFja2FnZXMvYXRvbS10eXBlc2NyaXB0L25vZGVfbW9kdWxlcy9mc2V2ZW50cy9idWlsZC9SZWxlYXNlLy5kZXBzL1VzZXJzL2FybmVzY2hyZXVkZXIvLmRvdGZpbGVzL2F0b20vYXRvbS5zeW1saW5rL3BhY2thZ2VzL2VkaXRvcmNvbmZpZy9jb21tYW5kcy9zaG93LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqIEBiYWJlbCAqL1xuXG5jb25zdCBub3RpZmljYXRpb25UZW1wbGF0ZSA9IHByb3BzID0+IHtcblx0cmV0dXJuIGBcbiR7cHJvcHMubWVzc2FnZXMucmVkdWNlKChwcmV2LCBjdXJyKSA9PiB7XG5cdHJldHVybiBgJHtwcmV2fSR7Y3Vyci5yZXBsYWNlKC9cXHJ8XFxuL2dtLCAnJykucmVwbGFjZSgnQCcsICcgIFxcbicpfVxcblxcbmA7XG59LCAnJyl9XG5cbiMjIyBBY3RpdmUgQ29uZmlndXJhdGlvblxufEVkaXRvcmNvbmZpZy1Qcm9wZXJ0eXxBcHBsaWVkIFNldHRpbmd8XG58LS0tLS0tLS18LS0tLS0tOnxcbnxcXGBlbmRfb2ZfbGluZVxcYHxcXGAke3Byb3BzLmVuZF9vZl9saW5lfVxcYHxcbnxcXGBjaGFyc2V0XFxgfFxcYCR7cHJvcHMuY2hhcnNldH1cXGB8XG58XFxgaW5kZW50X3N0eWxlXFxgfFxcYCR7cHJvcHMuaW5kZW50X3N0eWxlfVxcYHxcbnxcXGBpbmRlbnRfc2l6ZVxcYC8gXFxgdGFiX3dpZHRoXFxgfFxcYCR7cHJvcHMudGFiX3dpZHRofVxcYHxcbnxcXGBpbnNlcnRfZmluYWxfbmV3bGluZVxcYHxcXGAke3Byb3BzLmluc2VydF9maW5hbF9uZXdsaW5lfVxcYHxcbnxcXGB0cmltX3RyYWlsaW5nX3doaXRlc3BhY2VcXGB8XFxgJHtwcm9wcy50cmltX3RyYWlsaW5nX3doaXRlc3BhY2V9XFxgfFxufFxcYG1heF9saW5lX2xlbmd0aFxcYHxcXGAke3Byb3BzLm1heF9saW5lX2xlbmd0aH1cXGB8XG5cbl8oYXV0bzogYXRvbS1lZGl0b3Jjb25maWcgaXMgbm90IGluZmx1ZW5jaW5nIHRoYXQgYmVoYXZpb3IuIEEgZnVsbCBkZXNjcmlwdGlvbiBvZiB0aGUgcHJvcGVydGllcyBjYW4gYmUgZm91bmQgb24gZWRpdG9yY29uZmlnLm9yZy4pX1xuXG4keyhwcm9wcy5maWxlbmFtZSAhPT0gdW5kZWZpbmVkICYmIHByb3BzLmZpbGVuYW1lKSB8fCAnJ31cbmA7XG59O1xuXG5jb25zdCBpbml0ID0gKCkgPT4ge1xuXHRjb25zdCB0ZXh0RWRpdG9yID0gYXRvbS53b3Jrc3BhY2UuZ2V0QWN0aXZlVGV4dEVkaXRvcigpO1xuXHRpZiAodGV4dEVkaXRvciAmJlxuXHRcdHRleHRFZGl0b3IuZ2V0QnVmZmVyKCkgJiZcblx0XHR0ZXh0RWRpdG9yLmdldEJ1ZmZlcigpLmVkaXRvcmNvbmZpZykge1xuXHRcdGNvbnN0IGJ1ZmZlciA9IHRleHRFZGl0b3IuZ2V0QnVmZmVyKCk7XG5cdFx0Y29uc3QgZWNmZyA9IGJ1ZmZlci5lZGl0b3Jjb25maWc7XG5cdFx0Y29uc3Qgc2V0dGluZ3MgPSBlY2ZnLnNldHRpbmdzO1xuXHRcdGNvbnN0IGxpbmVFbmRpbmdzID0geydcXG4nOiAnXFxcXG4nLCAnXFxyJzogJ1xcXFxyJywgJ1xcclxcbic6ICdcXFxcclxcXFxuJ307XG5cblx0XHRjb25zdCBwcm9wZXJ0aWVzID0ge1xuXHRcdFx0ZmlsZW5hbWU6IGJ1ZmZlci5nZXRVcmkoKSxcblx0XHRcdG1lc3NhZ2VzOiBlY2ZnLm1lc3NhZ2VzLFxuXHRcdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNhbWVsY2FzZVxuXHRcdFx0ZW5kX29mX2xpbmU6IGxpbmVFbmRpbmdzW3NldHRpbmdzLmVuZF9vZl9saW5lXSB8fCBzZXR0aW5ncy5lbmRfb2ZfbGluZSxcblx0XHRcdGNoYXJzZXQ6IHNldHRpbmdzLmNoYXJzZXQsXG5cdFx0XHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY2FtZWxjYXNlXG5cdFx0XHRpbmRlbnRfc3R5bGU6IHNldHRpbmdzLmluZGVudF9zdHlsZSxcblx0XHRcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjYW1lbGNhc2Vcblx0XHRcdHRhYl93aWR0aDogc2V0dGluZ3MudGFiX3dpZHRoLFxuXHRcdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNhbWVsY2FzZVxuXHRcdFx0aW5zZXJ0X2ZpbmFsX25ld2xpbmU6IHNldHRpbmdzLmluc2VydF9maW5hbF9uZXdsaW5lLFxuXHRcdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNhbWVsY2FzZVxuXHRcdFx0dHJpbV90cmFpbGluZ193aGl0ZXNwYWNlOiBzZXR0aW5ncy50cmltX3RyYWlsaW5nX3doaXRlc3BhY2UsXG5cdFx0XHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY2FtZWxjYXNlXG5cdFx0XHRtYXhfbGluZV9sZW5ndGg6IHNldHRpbmdzLm1heF9saW5lX2xlbmd0aFxuXHRcdH07XG5cblx0XHRjb25zdCBub3RpZmljYXRpb25PcHRpb25zID0ge1xuXHRcdFx0ZGVzY3JpcHRpb246IG5vdGlmaWNhdGlvblRlbXBsYXRlKHByb3BlcnRpZXMpLFxuXHRcdFx0ZGlzbWlzc2FibGU6IHRydWVcblx0XHR9O1xuXG5cdFx0c3dpdGNoIChlY2ZnLnN0YXRlKSB7XG5cdFx0XHRjYXNlICdzdWNjZXNzJzpcblx0XHRcdFx0YXRvbS5ub3RpZmljYXRpb25zLmFkZFN1Y2Nlc3ModGV4dEVkaXRvci5nZXRUaXRsZSgpLCBub3RpZmljYXRpb25PcHRpb25zKTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRjYXNlICd3YXJuaW5nJzpcblx0XHRcdFx0YXRvbS5ub3RpZmljYXRpb25zLmFkZFdhcm5pbmcodGV4dEVkaXRvci5nZXRUaXRsZSgpLCBub3RpZmljYXRpb25PcHRpb25zKTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRjYXNlICdlcnJvcic6XG5cdFx0XHRcdGF0b20ubm90aWZpY2F0aW9ucy5hZGRFcnJvcih0ZXh0RWRpdG9yLmdldFRpdGxlKCksIG5vdGlmaWNhdGlvbk9wdGlvbnMpO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdGF0b20ubm90aWZpY2F0aW9ucy5hZGRJbmZvKHRleHRFZGl0b3IuZ2V0VGl0bGUoKSwgbm90aWZpY2F0aW9uT3B0aW9ucyk7XG5cdFx0fVxuXHR9XG59O1xuXG5jb25zdCBzdWJzY3JpYmVyID0gKCkgPT4ge1xuXHRhdG9tLmNvbW1hbmRzLmFkZCgnYXRvbS13b3Jrc3BhY2UnLCAnRWRpdG9yQ29uZmlnOnNob3ctc3RhdGUnLCBpbml0KTtcbn07XG5cbmV4cG9ydCB7c3Vic2NyaWJlciBhcyBkZWZhdWx0LCBpbml0fTtcbiJdfQ==