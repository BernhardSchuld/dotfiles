var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/** @babel */

var EditorconfigWrapGuideElement = (function (_HTMLDivElement) {
	_inherits(EditorconfigWrapGuideElement, _HTMLDivElement);

	function EditorconfigWrapGuideElement() {
		_classCallCheck(this, EditorconfigWrapGuideElement);

		_get(Object.getPrototypeOf(EditorconfigWrapGuideElement.prototype), 'constructor', this).apply(this, arguments);
	}

	_createClass(EditorconfigWrapGuideElement, [{
		key: 'initialize',
		// eslint-disable-line no-undef
		value: function initialize(editor, editorElement) {
			this.classList.add('ecfg-wrap-guide');
			this.editorElement = editorElement;
			this.editor = editor;
			this.visible = true;

			this.attachToLines();
			this.update();
		}
	}, {
		key: 'attachToLines',
		value: function attachToLines() {
			var editorElement = this.editorElement;

			if (editorElement && editorElement.rootElement) {
				var lines = editorElement.rootElement.querySelector('.lines');
				if (lines) {
					lines.appendChild(this);
				}
			}
		}
	}, {
		key: 'update',
		value: function update() {
			var editorElement = this.editorElement;
			// eslint-disable-next-line camelcase
			var max_line_length = this.editor.getBuffer().editorconfig.settings.max_line_length;

			if (max_line_length === 'auto') {
				// eslint-disable-line camelcase
				this.style.display = 'none';
				this.visible = false;
			} else {
				// eslint-disable-next-line camelcase
				var columnWidth = editorElement.getDefaultCharacterWidth() * max_line_length;
				if (editorElement.logicalDisplayBuffer) {
					columnWidth -= editorElement.getScrollLeft();
				} else {
					columnWidth -= this.editor.getScrollLeft();
				}
				this.style.left = Math.round(columnWidth) + 'px';
				this.style.display = 'block';
				this.visible = true;
			}
		}
	}, {
		key: 'isVisible',
		value: function isVisible() {
			return this.visible === true;
		}
	}]);

	return EditorconfigWrapGuideElement;
})(HTMLDivElement);

module.exports = document.registerElement('ecfg-wrap-guide', {
	'extends': 'div',
	prototype: EditorconfigWrapGuideElement.prototype
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9hcm5lc2NocmV1ZGVyLy5kb3RmaWxlcy9hdG9tL2F0b20uc3ltbGluay9wYWNrYWdlcy9hdG9tLXR5cGVzY3JpcHQvbm9kZV9tb2R1bGVzL2ZzZXZlbnRzL2J1aWxkL1JlbGVhc2UvLmRlcHMvVXNlcnMvYXJuZXNjaHJldWRlci8uZG90ZmlsZXMvYXRvbS9hdG9tLnN5bWxpbmsvcGFja2FnZXMvZWRpdG9yY29uZmlnL2xpYi93cmFwZ3VpZGUtdmlldy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0lBRU0sNEJBQTRCO1dBQTVCLDRCQUE0Qjs7VUFBNUIsNEJBQTRCO3dCQUE1Qiw0QkFBNEI7OzZCQUE1Qiw0QkFBNEI7OztjQUE1Qiw0QkFBNEI7OztTQUN2QixvQkFBQyxNQUFNLEVBQUUsYUFBYSxFQUFFO0FBQ2pDLE9BQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLGlCQUFpQixDQUFDLENBQUM7QUFDdEMsT0FBSSxDQUFDLGFBQWEsR0FBRyxhQUFhLENBQUM7QUFDbkMsT0FBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7QUFDckIsT0FBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUM7O0FBRXBCLE9BQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQztBQUNyQixPQUFJLENBQUMsTUFBTSxFQUFFLENBQUM7R0FDZDs7O1NBRVkseUJBQUc7QUFDZixPQUFNLGFBQWEsR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDOztBQUV6QyxPQUFJLGFBQWEsSUFDaEIsYUFBYSxDQUFDLFdBQVcsRUFBRTtBQUMzQixRQUFNLEtBQUssR0FBRyxhQUFhLENBQUMsV0FBVyxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUNoRSxRQUFJLEtBQUssRUFBRTtBQUNWLFVBQUssQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUM7S0FDeEI7SUFDRDtHQUNEOzs7U0FFSyxrQkFBRztBQUNSLE9BQU0sYUFBYSxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUM7O0FBRXpDLE9BQU0sZUFBZSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxFQUFFLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxlQUFlLENBQUM7O0FBRXRGLE9BQUksZUFBZSxLQUFLLE1BQU0sRUFBRTs7QUFDL0IsUUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLEdBQUcsTUFBTSxDQUFDO0FBQzVCLFFBQUksQ0FBQyxPQUFPLEdBQUcsS0FBSyxDQUFDO0lBQ3JCLE1BQU07O0FBRU4sUUFBSSxXQUFXLEdBQUcsYUFBYSxDQUFDLHdCQUF3QixFQUFFLEdBQUcsZUFBZSxDQUFDO0FBQzdFLFFBQUksYUFBYSxDQUFDLG9CQUFvQixFQUFFO0FBQ3ZDLGdCQUFXLElBQUksYUFBYSxDQUFDLGFBQWEsRUFBRSxDQUFDO0tBQzdDLE1BQU07QUFDTixnQkFBVyxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsYUFBYSxFQUFFLENBQUM7S0FDM0M7QUFDRCxRQUFJLENBQUMsS0FBSyxDQUFDLElBQUksR0FBTSxJQUFJLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQyxPQUFJLENBQUM7QUFDakQsUUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDO0FBQzdCLFFBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDO0lBQ3BCO0dBQ0Q7OztTQUVRLHFCQUFHO0FBQ1gsVUFBTyxJQUFJLENBQUMsT0FBTyxLQUFLLElBQUksQ0FBQztHQUM3Qjs7O1FBL0NJLDRCQUE0QjtHQUFTLGNBQWM7O0FBa0R6RCxNQUFNLENBQUMsT0FBTyxHQUFHLFFBQVEsQ0FBQyxlQUFlLENBQUMsaUJBQWlCLEVBQUU7QUFDNUQsWUFBUyxLQUFLO0FBQ2QsVUFBUyxFQUFFLDRCQUE0QixDQUFDLFNBQVM7Q0FDakQsQ0FBQyxDQUFDIiwiZmlsZSI6Ii9Vc2Vycy9hcm5lc2NocmV1ZGVyLy5kb3RmaWxlcy9hdG9tL2F0b20uc3ltbGluay9wYWNrYWdlcy9hdG9tLXR5cGVzY3JpcHQvbm9kZV9tb2R1bGVzL2ZzZXZlbnRzL2J1aWxkL1JlbGVhc2UvLmRlcHMvVXNlcnMvYXJuZXNjaHJldWRlci8uZG90ZmlsZXMvYXRvbS9hdG9tLnN5bWxpbmsvcGFja2FnZXMvZWRpdG9yY29uZmlnL2xpYi93cmFwZ3VpZGUtdmlldy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKiBAYmFiZWwgKi9cblxuY2xhc3MgRWRpdG9yY29uZmlnV3JhcEd1aWRlRWxlbWVudCBleHRlbmRzIEhUTUxEaXZFbGVtZW50IHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bmRlZlxuXHRpbml0aWFsaXplKGVkaXRvciwgZWRpdG9yRWxlbWVudCkge1xuXHRcdHRoaXMuY2xhc3NMaXN0LmFkZCgnZWNmZy13cmFwLWd1aWRlJyk7XG5cdFx0dGhpcy5lZGl0b3JFbGVtZW50ID0gZWRpdG9yRWxlbWVudDtcblx0XHR0aGlzLmVkaXRvciA9IGVkaXRvcjtcblx0XHR0aGlzLnZpc2libGUgPSB0cnVlO1xuXG5cdFx0dGhpcy5hdHRhY2hUb0xpbmVzKCk7XG5cdFx0dGhpcy51cGRhdGUoKTtcblx0fVxuXG5cdGF0dGFjaFRvTGluZXMoKSB7XG5cdFx0Y29uc3QgZWRpdG9yRWxlbWVudCA9IHRoaXMuZWRpdG9yRWxlbWVudDtcblxuXHRcdGlmIChlZGl0b3JFbGVtZW50ICYmXG5cdFx0XHRlZGl0b3JFbGVtZW50LnJvb3RFbGVtZW50KSB7XG5cdFx0XHRjb25zdCBsaW5lcyA9IGVkaXRvckVsZW1lbnQucm9vdEVsZW1lbnQucXVlcnlTZWxlY3RvcignLmxpbmVzJyk7XG5cdFx0XHRpZiAobGluZXMpIHtcblx0XHRcdFx0bGluZXMuYXBwZW5kQ2hpbGQodGhpcyk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0dXBkYXRlKCkge1xuXHRcdGNvbnN0IGVkaXRvckVsZW1lbnQgPSB0aGlzLmVkaXRvckVsZW1lbnQ7XG5cdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNhbWVsY2FzZVxuXHRcdGNvbnN0IG1heF9saW5lX2xlbmd0aCA9IHRoaXMuZWRpdG9yLmdldEJ1ZmZlcigpLmVkaXRvcmNvbmZpZy5zZXR0aW5ncy5tYXhfbGluZV9sZW5ndGg7XG5cblx0XHRpZiAobWF4X2xpbmVfbGVuZ3RoID09PSAnYXV0bycpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBjYW1lbGNhc2Vcblx0XHRcdHRoaXMuc3R5bGUuZGlzcGxheSA9ICdub25lJztcblx0XHRcdHRoaXMudmlzaWJsZSA9IGZhbHNlO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY2FtZWxjYXNlXG5cdFx0XHRsZXQgY29sdW1uV2lkdGggPSBlZGl0b3JFbGVtZW50LmdldERlZmF1bHRDaGFyYWN0ZXJXaWR0aCgpICogbWF4X2xpbmVfbGVuZ3RoO1xuXHRcdFx0aWYgKGVkaXRvckVsZW1lbnQubG9naWNhbERpc3BsYXlCdWZmZXIpIHtcblx0XHRcdFx0Y29sdW1uV2lkdGggLT0gZWRpdG9yRWxlbWVudC5nZXRTY3JvbGxMZWZ0KCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRjb2x1bW5XaWR0aCAtPSB0aGlzLmVkaXRvci5nZXRTY3JvbGxMZWZ0KCk7XG5cdFx0XHR9XG5cdFx0XHR0aGlzLnN0eWxlLmxlZnQgPSBgJHtNYXRoLnJvdW5kKGNvbHVtbldpZHRoKX1weGA7XG5cdFx0XHR0aGlzLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xuXHRcdFx0dGhpcy52aXNpYmxlID0gdHJ1ZTtcblx0XHR9XG5cdH1cblxuXHRpc1Zpc2libGUoKSB7XG5cdFx0cmV0dXJuIHRoaXMudmlzaWJsZSA9PT0gdHJ1ZTtcblx0fVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGRvY3VtZW50LnJlZ2lzdGVyRWxlbWVudCgnZWNmZy13cmFwLWd1aWRlJywge1xuXHRleHRlbmRzOiAnZGl2Jyxcblx0cHJvdG90eXBlOiBFZGl0b3Jjb25maWdXcmFwR3VpZGVFbGVtZW50LnByb3RvdHlwZVxufSk7XG4iXX0=